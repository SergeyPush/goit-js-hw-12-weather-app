{"version":3,"sources":["webpack:///./js/getGeoPosition.js","webpack:///./js/fetchWeather.js","webpack:///./js/app.js"],"names":["getGeoPosition","Promise","resolve","reject","options","navigator","geolocation","getCurrentPosition","fetchWeather","position","queryString","latitude","longitude","join","fetch","baseURL","weatherDetails","document","getElementById","location","querySelector","temp","humidity","wind","conditions","image","searchForm","displayWeather","obj","src","current","condition","icon","textContent","name","temp_c","wind_kph","text","showWeatherCard","classList","remove","PNotify","defaults","styling","then","coords","res","json","loc","error","title","message","addEventListener","event","preventDefault","cityValue","target","elements","city","value","Error"],"mappings":"qKAUeA,EAVQ,WAKrB,OAAO,IAAIC,QAAQ,SAACC,EAASC,EAAQC,GACnCC,UAAUC,YAAYC,mBAAmBL,EAASC,EAAQC,MCA/CI,aAAA,SAASC,GACtB,IAAIC,EACoB,iBAAbD,EAETC,EAAc,CADkBD,EAAxBE,SAAwBF,EAAdG,WACkBC,KAAK,KAEzCH,EAAcD,EAGhB,OAAOK,MAASC,8EAAwBL,iBCRpCM,iCAAiBC,SAASC,eAAe,YACzCC,EAAWF,SAASG,cAAc,2BAClCC,EAAOJ,SAASG,cAAc,uBAC9BE,EAAWL,SAASG,cAAc,2BAClCG,EAAON,SAASG,cAAc,uBAC9BI,EAAaP,SAASG,cAAc,6BACpCK,EAAQR,SAASG,cAAc,YAC/BM,EAAaT,SAASC,eAAe,eA4C3C,SAASS,EAAeC,GACtBH,EAAMI,IAAN,SAAqBD,EAAIE,QAAQC,UAAUC,KAC3Cb,EAASc,YAAcL,EAAIT,SAASe,KACpCb,EAAKY,YAAcL,EAAIE,QAAQK,OAAS,KACxCb,EAASW,YAAcL,EAAIE,QAAQR,SAAW,IAC9CC,EAAKU,YAAcL,EAAIE,QAAQM,SAAW,MAC1CZ,EAAWS,YAAcL,EAAIE,QAAQC,UAAUM,KAGjD,SAASC,IACPtB,EAAeuB,UAAUC,OAAO,aApDlCC,IAAQC,SAASC,QAAU,WAE3B3C,IACG4C,KAAK,SAAAzB,GACJX,EAAaW,EAAS0B,QACnBD,KAAK,SAAAE,GAAG,OAAIA,EAAIC,SAChBH,KAAK,SAAAI,GACJrB,EAAeqB,GACfV,QANR,MASS,SAAAW,GACLR,IAAQQ,MAAM,CACZC,MAAO,QACPb,KAAI,GAAKY,EAAME,YAIrBzB,EAAW0B,iBAAiB,SAE5B,SAA0BC,GACxBA,EAAMC,iBACN,IAAMC,EAAYF,EAAMG,OAAOC,SAASC,KAAKC,MAC7CnD,EAAa+C,GACVX,KAAK,SAAAE,GACJ,OAAOA,EAAIC,SAEZH,KAAK,SAAAI,GACJ,GAAIA,EAAIC,MACN,MAAM,IAAIW,MAAMZ,EAAIC,MAAME,SAE5Bb,IACAX,EAAeqB,KATnB,MAWS,SAAAC,GACLR,IAAQQ,MAAM,CACZC,MAAO,QACPb,KAAI,GAAKY,EAAME","file":"main.8ee1155d63e6269a2ed3.js","sourcesContent":["const getGeoPosition = () => {\n  const options = {\n    timeout: 5000,\n    maximumAge: 30,\n  };\n  return new Promise((resolve, reject, options) => {\n    navigator.geolocation.getCurrentPosition(resolve, reject, options);\n  });\n};\n\nexport default getGeoPosition;\n","const key = 'f3ec9826f1d149aea8664106191107';\n\nconst request =\n  'http://api.apixu.com/v1/current.json?key=f3ec9826f1d149aea8664106191107&q=';\nconst baseURL = 'https://api.apixu.com/v1/current.json';\n\nexport default function(position) {\n  let queryString;\n  if (typeof position === 'object') {\n    const { latitude, longitude } = position;\n    queryString = [latitude, longitude].join(',');\n  } else {\n    queryString = position;\n  }\n\n  return fetch(`${baseURL}?key=${key}&q=${queryString}`);\n}\n","import getGeoPosition from './getGeoPosition';\nimport fetchWeather from './fetchWeather';\nimport PNotify from './../../node_modules/pnotify/dist/es/PNotify.js';\nimport PNotifyStyleMaterial from './../../node_modules/pnotify/dist/es/PNotifyStyleMaterial.js';\nimport PNotifyButtons from './../../node_modules/pnotify/dist/es/PNotifyButtons.js';\nimport './../../node_modules/pnotify/dist/PNotifyBrightTheme.css';\n\nconst weatherDetails = document.getElementById('weather');\nconst location = document.querySelector(\"[data-field='location']\");\nconst temp = document.querySelector(\"[data-field='temp']\");\nconst humidity = document.querySelector(\"[data-field='humidity']\");\nconst wind = document.querySelector(\"[data-field='wind']\");\nconst conditions = document.querySelector(\"[data-field='conditions']\");\nconst image = document.querySelector('img.icon');\nconst searchForm = document.getElementById('search-form');\n\nPNotify.defaults.styling = 'material';\n\ngetGeoPosition()\n  .then(location => {\n    fetchWeather(location.coords)\n      .then(res => res.json())\n      .then(loc => {\n        displayWeather(loc);\n        showWeatherCard();\n      });\n  })\n  .catch(error => {\n    PNotify.error({\n      title: 'Error',\n      text: `${error.message}`,\n    });\n  });\n\nsearchForm.addEventListener('submit', handleSubmitForm);\n\nfunction handleSubmitForm(event) {\n  event.preventDefault();\n  const cityValue = event.target.elements.city.value;\n  fetchWeather(cityValue)\n    .then(res => {\n      return res.json();\n    })\n    .then(loc => {\n      if (loc.error) {\n        throw new Error(loc.error.message);\n      }\n      showWeatherCard();\n      displayWeather(loc);\n    })\n    .catch(error => {\n      PNotify.error({\n        title: 'Error',\n        text: `${error.message}`,\n      });\n    });\n}\n\nfunction displayWeather(obj) {\n  image.src = `https:${obj.current.condition.icon}`;\n  location.textContent = obj.location.name;\n  temp.textContent = obj.current.temp_c + ' C';\n  humidity.textContent = obj.current.humidity + '%';\n  wind.textContent = obj.current.wind_kph + 'kph';\n  conditions.textContent = obj.current.condition.text;\n}\n\nfunction showWeatherCard() {\n  weatherDetails.classList.remove('is-hidden');\n}\n\nfunction hideWeatherCard() {\n  weatherDetails.classList.add('is-hidden');\n}\n"],"sourceRoot":""}